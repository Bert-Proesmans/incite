syntax = "proto2";
package bnet.protocol;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor


// ref: bnet.protocol.AccountInfo
message AccountInfo {
	optional bool account_paid = 1;
	optional fixed32 country_id = 2;
	optional string battle_tag = 3;
	optional bool manual_review = 4;
}

// ref: bnet.protocol.Address
message Address {
	optional string address = 1;
	optional uint32 port = 2;
}

// ref: bnet.protocol.attribute.Attribute
message Attribute {
	optional string name = 1;
	optional Variant value = 2;
}

// ref: bnet.protocol.ContentHandle
message ContentHandle {
	optional fixed32 region = 1;
	optional fixed32 usage = 2;
	optional bytes hash = 3;
	optional string proto_url = 4;
}

// ref: bnet.protocol.EntityId
message EntityId {
	optional fixed64 high = 1;
	optional fixed64 low = 2;
}

// ref: bnet.protocol.ErrorInfo
message ErrorInfo {
	optional ObjectAddress object_address = 1;
	optional uint32 status = 2;
	optional uint32 service_hash = 3;
	optional uint32 method_id = 4;
}

// ref: bnet.protocol.Header
message Header {
	optional uint32 service_id = 1;
	optional uint32 method_id = 2;
	optional uint32 token = 3;
	optional uint64 object_id = 4;
	optional uint32 size = 5;
	optional uint32 status = 6;
	repeated ErrorInfo error = 7;
	optional uint64 timeout = 8;
}

// ref: bnet.protocol.Identity
message Identity {
	optional EntityId account_id = 1;
	optional EntityId game_account_id = 2;
}

// ref: bnet.protocol.NO_RESPONSE
message NO_RESPONSE {
}

// ref: bnet.protocol.NoData
message NoData {
}

// ref: bnet.protocol.ObjectAddress
message ObjectAddress {
	optional ProcessId host = 1;
	optional uint64 object_id = 2;
}

// ref: bnet.protocol.Privilege
message Privilege {
	optional string name = 1;
	optional uint32 value = 2;
}

// ref: bnet.protocol.ProcessId
message ProcessId {
	optional uint32 label = 1;
	optional uint32 epoch = 2;
}

// ref: bnet.protocol.Role
message Role {
	optional uint32 id = 1;
	optional string name = 2;
	repeated string privilege = 3;
	repeated uint32 assignable_role = 4 [packed=true];
	optional bool required = 5;
	optional bool unique = 6;
	optional uint32 relegation_role = 7;
	repeated Attribute attribute = 8;
}

// ref: bnet.protocol.RoleSet
message RoleSet {
	optional string program = 1;
	optional string service = 2;
	optional string subtype = 3;
	repeated Role role = 4;
	repeated uint32 default_role = 5 [packed=true];
	optional int32 max_members = 6;
	repeated Attribute attribute = 7;
}

// ref: bnet.protocol.RoleSetConfig
message RoleSetConfig {
	repeated Privilege privilege = 1;
	optional RoleSet role_set = 2;
}

// ref: bnet.protocol.attribute.Variant
message Variant {
	optional bool bool_value = 2;
	optional int64 int_value = 3;
	optional double float_value = 4;
	optional string string_value = 5;
	optional bytes blob_value = 6;
	optional bytes message_value = 7;
	optional string fourcc_value = 8;
	optional uint64 uint_value = 9;
	optional EntityId entityid_value = 10;
}

