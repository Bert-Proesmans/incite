syntax = "proto2";
package bnet.protocol.channel;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "bnet/protocol/attribute_468/attribute_468.proto";
import "bnet/protocol/invitation/invitation.proto";
import "bnet/protocol/protocol.proto";

// ref: bnet.protocol.channel.AddMemberRequest
message AddMemberRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.Identity member_identity = 2;
	optional MemberState member_state = 3;
	optional uint64 object_id = 4;
	optional bool subscribe = 5;
}

// ref: bnet.protocol.channel.AddNotification
message AddNotification {
	optional Member self = 1;
	repeated Member member = 2;
	optional ChannelState channel_state = 3;
}

// ref: bnet.protocol.channel.ChannelDescription
message ChannelDescription {
	optional bnet.protocol.EntityId channel_id = 1;
	optional uint32 current_members = 2;
	optional ChannelState state = 3;
}

// ref: bnet.protocol.channel.ChannelInfo
message ChannelInfo {
	optional ChannelDescription description = 1;
	repeated Member member = 2;
}

// ref: bnet.protocol.channel.ChannelState
message ChannelState {
	// ref: bnet.protocol.channel.ChannelState/Types/PrivacyLevel
	enum PrivacyLevel {
		PRIVACY_LEVEL_OPEN = 1;
		PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = 2;
		PRIVACY_LEVEL_OPEN_INVITATION = 3;
		PRIVACY_LEVEL_CLOSED = 4;
	}

	optional uint32 max_members = 1;
	optional uint32 min_members = 2;
	repeated bnet.protocol.Attribute attribute = 3;
	repeated bnet.protocol.invitation.Invitation invitation = 4;
	optional uint32 max_invitations = 5;
	optional uint32 reason = 6;
	optional PrivacyLevel privacy_level = 7;
	optional string name = 8;
	optional string delegate_name = 9;
	optional string channel_type = 10;
	optional fixed32 program = 11;
	optional bool allow_offline_members = 12;
	optional bool subscribe_to_presence = 13;
}

// ref: bnet.protocol.channel.CreateChannelRequest
message CreateChannelRequest {
	optional bnet.protocol.Identity agent_identity = 1;
	optional MemberState member_state = 2;
	optional ChannelState channel_state = 3;
	optional bnet.protocol.EntityId channel_id = 4;
	optional uint64 object_id = 5;
	optional bnet.protocol.EntityId local_agent = 6;
	optional MemberState local_member_state = 7;
}

// ref: bnet.protocol.channel.CreateChannelResponse
message CreateChannelResponse {
	optional uint64 object_id = 1;
	optional bnet.protocol.EntityId channel_id = 2;
}

// ref: bnet.protocol.channel.DissolveRequest
message DissolveRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional uint32 reason = 2;
}

// ref: bnet.protocol.channel.FindChannelOptions
message FindChannelOptions {
	optional uint32 start_index = 1;
	optional uint32 max_results = 2;
	optional string name = 3;
	optional fixed32 program = 4;
	optional fixed32 locale = 5;
	optional uint32 capacity_full = 6;
	optional bnet.protocol.attribute_468.AttributeFilter attribute_filter = 7;
	optional string channel_type = 8;
}

// ref: bnet.protocol.channel.FindChannelRequest
message FindChannelRequest {
	optional bnet.protocol.Identity agent_identity = 1;
	optional FindChannelOptions options = 2;
}

// ref: bnet.protocol.channel.FindChannelResponse
message FindChannelResponse {
	repeated ChannelDescription channel = 1;
}

// ref: bnet.protocol.channel.GetChannelIdRequest
message GetChannelIdRequest {
}

// ref: bnet.protocol.channel.GetChannelIdResponse
message GetChannelIdResponse {
	optional bnet.protocol.EntityId channel_id = 1;
}

// ref: bnet.protocol.channel.GetChannelInfoRequest
message GetChannelInfoRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId channel_id = 2;
	optional bool fetch_state = 3;
	optional bool fetch_members = 4;
}

// ref: bnet.protocol.channel.GetChannelInfoResponse
message GetChannelInfoResponse {
	optional ChannelInfo channel_info = 1;
}

// ref: bnet.protocol.channel.JoinChannelRequest
message JoinChannelRequest {
	optional bnet.protocol.Identity agent_identity = 1;
	optional MemberState member_state = 2;
	optional bnet.protocol.EntityId channel_id = 3;
	optional uint64 object_id = 4;
	repeated bnet.protocol.EntityId friend_account_id = 5;
	optional bool local_subscriber = 6;
}

// ref: bnet.protocol.channel.JoinChannelResponse
message JoinChannelResponse {
	optional uint64 object_id = 1;
	optional bool require_friend_validation = 2;
	repeated bnet.protocol.EntityId privileged_account = 3;
}

// ref: bnet.protocol.channel.JoinNotification
message JoinNotification {
	optional Member member = 1;
}

// ref: bnet.protocol.channel.LeaveNotification
message LeaveNotification {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

// ref: bnet.protocol.channel.Member
message Member {
	optional bnet.protocol.Identity identity = 1;
	optional MemberState state = 2;
}

// ref: bnet.protocol.channel.MemberState
message MemberState {
	repeated bnet.protocol.Attribute attribute = 1;
	repeated uint32 role = 2 [packed=true];
	optional uint64 privileges = 3;
	optional bnet.protocol.AccountInfo info = 4;
	optional bool hidden = 5;
}

// ref: bnet.protocol.channel.Message
message Message {
	repeated bnet.protocol.Attribute attribute = 1;
	optional uint32 role = 2;
}

// ref: bnet.protocol.channel.RemoveMemberRequest
message RemoveMemberRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

// ref: bnet.protocol.channel.RemoveNotification
message RemoveNotification {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

// ref: bnet.protocol.channel.SendMessageNotification
message SendMessageNotification {
	optional bnet.protocol.EntityId agent_id = 1;
	optional Message message = 2;
	optional uint64 required_privileges = 3;
}

// ref: bnet.protocol.channel.SendMessageRequest
message SendMessageRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional Message message = 2;
	optional uint64 required_privileges = 3;
}

// ref: bnet.protocol.channel.SetRolesRequest
message SetRolesRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	repeated uint32 role = 2 [packed=true];
	repeated bnet.protocol.EntityId member_id = 3;
}

// ref: bnet.protocol.channel.SubscribeChannelRequest
message SubscribeChannelRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId channel_id = 2;
	optional uint64 object_id = 3;
}

// ref: bnet.protocol.channel.SubscribeChannelResponse
message SubscribeChannelResponse {
	optional uint64 object_id = 1;
}

// ref: bnet.protocol.channel.UnsubscribeMemberRequest
message UnsubscribeMemberRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId member_id = 2;
}

// ref: bnet.protocol.channel.UpdateChannelStateNotification
message UpdateChannelStateNotification {
	optional bnet.protocol.EntityId agent_id = 1;
	optional ChannelState state_change = 2;
}

// ref: bnet.protocol.channel.UpdateChannelStateRequest
message UpdateChannelStateRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional ChannelState state_change = 2;
}

// ref: bnet.protocol.channel.UpdateMemberStateNotification
message UpdateMemberStateNotification {
	optional bnet.protocol.EntityId agent_id = 1;
	repeated Member state_change = 2;
	repeated uint32 removed_role = 3 [packed=true];
}

// ref: bnet.protocol.channel.UpdateMemberStateRequest
message UpdateMemberStateRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	repeated Member state_change = 2;
	repeated uint32 removed_role = 3 [packed=true];
}

