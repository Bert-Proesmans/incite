syntax = "proto2";
package bnet.protocol.account;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "bnet/protocol/protocol.proto";

// ref: bnet.protocol.account.AccountBlob
message AccountBlob {
	optional fixed32 id = 2;
	optional uint32 region = 3;
	repeated string email = 4;
	optional uint64 flags = 5;
	optional uint64 secure_release = 6;
	optional uint64 whitelist_start = 7;
	optional uint64 whitelist_end = 8;
	optional string full_name = 10;
	repeated AccountLicense licenses = 20;
	repeated AccountCredential credentials = 21;
	repeated GameAccountLink account_links = 22;
	optional string battle_tag = 23;
	optional fixed32 default_currency = 25;
	optional uint32 legal_region = 26;
	optional fixed32 legal_locale = 27;
	optional uint64 cache_expiration = 30;
	optional ParentalControlInfo parental_control_info = 31;
	optional string country = 32;
	optional uint32 preferred_region = 33;
}

// ref: bnet.protocol.account.AccountBlobList
message AccountBlobList {
	repeated AccountBlob blob = 1;
}

// ref: bnet.protocol.account.AccountCredential
message AccountCredential {
	optional uint32 id = 1;
	optional bytes data = 2;
}

// ref: bnet.protocol.account.AccountFieldOptions
message AccountFieldOptions {
	optional bool all_fields = 1;
	optional bool field_account_level_info = 2;
	optional bool field_privacy_info = 3;
	optional bool field_parental_control_info = 4;
	optional bool field_game_level_info = 6;
	optional bool field_game_status = 7;
	optional bool field_game_accounts = 8;
}

// ref: bnet.protocol.account.AccountFieldTags
message AccountFieldTags {
	optional fixed32 account_level_info_tag = 2;
	optional fixed32 privacy_info_tag = 3;
	optional fixed32 parental_control_info_tag = 4;
	repeated ProgramTag game_level_info_tags = 7;
	repeated ProgramTag game_status_tags = 9;
	repeated RegionTag game_account_tags = 11;
}

// ref: bnet.protocol.account.AccountId
message AccountId {
	optional fixed32 id = 1;
}

// ref: bnet.protocol.account.AccountLevelInfo
message AccountLevelInfo {
	repeated AccountLicense licenses = 3;
	optional fixed32 default_currency = 4;
	optional string country = 5;
	optional uint32 preferred_region = 6;
}

// ref: bnet.protocol.account.AccountLicense
message AccountLicense {
	optional uint32 id = 1;
	optional uint64 expires = 2;
}

// ref: bnet.protocol.account.AccountReference
message AccountReference {
	optional fixed32 id = 1;
	optional string email = 2;
	optional GameAccountHandle handle = 3;
	optional string battle_tag = 4;
	optional uint32 region = 10;
}

// ref: bnet.protocol.account.AccountServiceConfig
message AccountServiceConfig {
	repeated AccountServiceRegion region = 1;
}

// ref: bnet.protocol.account.AccountServiceRegion
message AccountServiceRegion {
	optional uint32 id = 1;
	optional string shard = 2;
}

// ref: bnet.protocol.account.AccountState
message AccountState {
	optional AccountLevelInfo account_level_info = 1;
	optional PrivacyInfo privacy_info = 2;
	optional ParentalControlInfo parental_control_info = 3;
	repeated GameLevelInfo game_level_info = 5;
	repeated GameStatus game_status = 6;
	repeated GameAccountList game_accounts = 7;
}

// ref: bnet.protocol.account.AccountStateNotification
message AccountStateNotification {
	optional AccountState state = 1;
	optional uint64 subscriber_id = 2;
	optional AccountFieldTags account_tags = 3;
	optional bool subscription_completed = 4;
}

// ref: bnet.protocol.account.AccountStateTagged
message AccountStateTagged {
	optional AccountState account_state = 1;
	optional AccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.CacheExpireRequest
message CacheExpireRequest {
	repeated AccountId account = 1;
	repeated GameAccountHandle game_account = 2;
	repeated string email = 3;
}

// ref: bnet.protocol.account.CAIS
message CAIS {
	optional uint32 played_minutes = 1;
	optional uint32 rested_minutes = 2;
	optional uint64 last_heard_time = 3;
}

// ref: bnet.protocol.account.CreateGameAccountRequest
message CreateGameAccountRequest {
	optional AccountId account = 1;
	optional uint32 region = 2;
	optional fixed32 program = 3;
	optional uint32 realm_permissions = 4;
}

// ref: bnet.protocol.account.CredentialUpdateRequest
message CredentialUpdateRequest {
	optional AccountId account = 1;
	repeated AccountCredential old_credentials = 2;
	repeated AccountCredential new_credentials = 3;
	optional uint32 region = 4;
}

// ref: bnet.protocol.account.CredentialUpdateResponse
message CredentialUpdateResponse {
}

// ref: bnet.protocol.account.CurrencyRestriction
message CurrencyRestriction {
	optional string currency = 1;
	optional string authenticator_cap = 2;
	optional string soft_cap = 3;
}

// ref: bnet.protocol.account.FlagUpdateRequest
message FlagUpdateRequest {
	optional AccountId account = 1;
	optional uint32 region = 2;
	optional uint64 flag = 3;
	optional bool active = 4;
}

// ref: bnet.protocol.account.FlagUpdateResponse
message FlagUpdateResponse {
}

// ref: bnet.protocol.account.ForwardCacheExpireRequest
message ForwardCacheExpireRequest {
	optional bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GameAccountBlob
message GameAccountBlob {
	optional GameAccountHandle game_account = 1;
	optional string name = 2;
	optional uint32 realm_permissions = 3;
	optional uint32 status = 4;
	optional uint64 flags = 5;
	optional uint32 billing_flags = 6;
	optional uint64 cache_expiration = 7;
	optional uint64 subscription_expiration = 10;
	optional uint32 units_remaining = 11;
	optional uint64 status_expiration = 12;
	optional uint32 box_level = 13;
	optional uint64 box_level_expiration = 14;
	repeated AccountLicense licenses = 20;
}

// ref: bnet.protocol.account.GameAccountBlobList
message GameAccountBlobList {
	repeated GameAccountBlob blob = 1;
}

// ref: bnet.protocol.account.GameAccountFieldOptions
message GameAccountFieldOptions {
	optional bool all_fields = 1;
	optional bool field_game_level_info = 2;
	optional bool field_game_time_info = 3;
	optional bool field_game_status = 4;
}

// ref: bnet.protocol.account.GameAccountFieldTags
message GameAccountFieldTags {
	optional fixed32 game_level_info_tag = 2;
	optional fixed32 game_time_info_tag = 3;
	optional fixed32 game_status_tag = 4;
}

// ref: bnet.protocol.account.GameAccountHandle
message GameAccountHandle {
	optional fixed32 id = 1;
	optional fixed32 program = 2;
	optional uint32 region = 3;
}

// ref: bnet.protocol.account.GameAccountLink
message GameAccountLink {
	optional GameAccountHandle game_account = 1;
	optional string name = 2;
}

// ref: bnet.protocol.account.GameAccountList
message GameAccountList {
	optional uint32 region = 3;
	repeated GameAccountHandle handle = 4;
}

// ref: bnet.protocol.account.GameAccountNotification
message GameAccountNotification {
	repeated GameAccountList region_delta = 1;
	optional uint64 subscriber_id = 2;
	optional AccountFieldTags account_tags = 3;
}

// ref: bnet.protocol.account.GameAccountSessionNotification
message GameAccountSessionNotification {
	optional GameAccountHandle game_account = 1;
	optional GameSessionUpdateInfo session_info = 2;
}

// ref: bnet.protocol.account.GameAccountState
message GameAccountState {
	optional GameLevelInfo game_level_info = 1;
	optional GameTimeInfo game_time_info = 2;
	optional GameStatus game_status = 3;
}

// ref: bnet.protocol.account.GameAccountStateNotification
message GameAccountStateNotification {
	optional GameAccountState state = 1;
	optional uint64 subscriber_id = 2;
	optional GameAccountFieldTags game_account_tags = 3;
	optional bool subscription_completed = 4;
}

// ref: bnet.protocol.account.GameAccountStateTagged
message GameAccountStateTagged {
	optional GameAccountState game_account_state = 1;
	optional GameAccountFieldTags game_account_tags = 2;
}

// ref: bnet.protocol.account.GameLevelInfo
message GameLevelInfo {
	optional bool is_starter_edition = 3;
	optional bool is_trial = 4;
	optional bool is_lifetime = 5;
	optional bool is_restricted = 6;
	optional bool is_beta = 7;
	optional string name = 8;
	optional fixed32 program = 9;
	repeated AccountLicense licenses = 10;
	optional uint32 realm_permissions = 11;
}

// ref: bnet.protocol.account.GameSessionInfo
message GameSessionInfo {
	optional uint32 start_time = 3;
	optional GameSessionLocation location = 4;
	optional bool has_benefactor = 5;
	optional bool is_using_igr = 6;
	optional bool parental_controls_active = 7;
}

// ref: bnet.protocol.account.GameSessionLocation
message GameSessionLocation {
	optional string ip_address = 1;
	optional uint32 country = 2;
	optional string city = 3;
}

// ref: bnet.protocol.account.GameSessionUpdateInfo
message GameSessionUpdateInfo {
	optional CAIS cais = 8;
}

// ref: bnet.protocol.account.GameStatus
message GameStatus {
	optional bool is_suspended = 4;
	optional bool is_banned = 5;
	optional uint64 suspension_expires = 6;
	optional fixed32 program = 7;
}

// ref: bnet.protocol.account.GameTimeInfo
message GameTimeInfo {
	optional bool is_unlimited_play_time = 3;
	optional uint64 play_time_expires = 5;
	optional bool is_subscription = 6;
	optional bool is_recurring_subscription = 7;
}

// ref: bnet.protocol.account.GameTimeRemainingInfo
message GameTimeRemainingInfo {
	optional uint32 minutes_remaining = 1;
	optional uint32 parental_daily_minutes_remaining = 2;
	optional uint32 parental_weekly_minutes_remaining = 3;
}

// ref: bnet.protocol.account.GetAccountRequest
message GetAccountRequest {
	optional AccountReference ref = 1;
	optional bool fetch_all = 10;
	optional bool fetch_blob = 11;
	optional bool fetch_id = 12;
	optional bool fetch_email = 13;
	optional bool fetch_battle_tag = 14;
	optional bool fetch_full_name = 15;
	optional bool fetch_links = 16;
	optional bool fetch_parental_controls = 17;
}

// ref: bnet.protocol.account.GetAccountResponse
message GetAccountResponse {
	optional AccountBlob blob = 11;
	optional AccountId id = 12;
	repeated string email = 13;
	optional string battle_tag = 14;
	optional string full_name = 15;
	repeated GameAccountLink links = 16;
	optional ParentalControlInfo parental_control_info = 17;
}

// ref: bnet.protocol.account.GetAccountStateRequest
message GetAccountStateRequest {
	optional bnet.protocol.EntityId entity_id = 1;
	optional uint32 program = 2;
	optional uint32 region = 3;
	optional AccountFieldOptions options = 10;
	optional AccountFieldTags tags = 11;
}

// ref: bnet.protocol.account.GetAccountStateResponse
message GetAccountStateResponse {
	optional AccountState state = 1;
	optional AccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.GetCAISInfoRequest
message GetCAISInfoRequest {
	optional bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GetCAISInfoResponse
message GetCAISInfoResponse {
	optional CAIS cais_info = 1;
}

// ref: bnet.protocol.account.GetEBalanceRequest
message GetEBalanceRequest {
	optional AccountId account_id = 1;
	optional string currency = 2;
	optional uint32 currency_home_region = 3;
}

// ref: bnet.protocol.account.GetEBalanceResponse
message GetEBalanceResponse {
	optional string balance = 1;
}

// ref: bnet.protocol.account.GetEBalanceRestrictionsRequest
message GetEBalanceRestrictionsRequest {
	optional uint32 currency_home_region = 1;
}

// ref: bnet.protocol.account.GetEBalanceRestrictionsResponse
message GetEBalanceRestrictionsResponse {
	repeated CurrencyRestriction currency_restrictions = 1;
}

// ref: bnet.protocol.account.GetGameAccountStateRequest
message GetGameAccountStateRequest {
	optional bnet.protocol.EntityId account_id = 1;
	optional bnet.protocol.EntityId game_account_id = 2;
	optional GameAccountFieldOptions options = 10;
	optional GameAccountFieldTags tags = 11;
}

// ref: bnet.protocol.account.GetGameAccountStateResponse
message GetGameAccountStateResponse {
	optional GameAccountState state = 1;
	optional GameAccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.GetGameSessionInfoRequest
message GetGameSessionInfoRequest {
	optional bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GetGameSessionInfoResponse
message GetGameSessionInfoResponse {
	optional GameSessionInfo session_info = 2;
}

// ref: bnet.protocol.account.GetGameTimeRemainingInfoRequest
message GetGameTimeRemainingInfoRequest {
	optional bnet.protocol.EntityId game_account_id = 1;
	optional bnet.protocol.EntityId account_id = 2;
}

// ref: bnet.protocol.account.GetGameTimeRemainingInfoResponse
message GetGameTimeRemainingInfoResponse {
	optional GameTimeRemainingInfo game_time_remaining_info = 1;
}

// ref: bnet.protocol.account.GetLicensesRequest
message GetLicensesRequest {
	optional bnet.protocol.EntityId target_id = 1;
	optional bool get_account_licenses = 2;
	optional bool get_game_account_licenses = 3;
	optional bool get_dynamic_account_licenses = 4;
	optional fixed32 program_id = 5;
	optional bool exclude_unknown_program = 6;
}

// ref: bnet.protocol.account.GetLicensesResponse
message GetLicensesResponse {
	repeated AccountLicense licenses = 1;
}

// ref: bnet.protocol.account.GetWalletListRequest
message GetWalletListRequest {
	optional AccountId account_id = 1;
	optional bool refresh = 2;
}

// ref: bnet.protocol.account.GetWalletListResponse
message GetWalletListResponse {
	repeated Wallet wallets = 1;
}

// ref: bnet.protocol.account.IsIgrAddressRequest
message IsIgrAddressRequest {
	optional string client_address = 1;
	optional uint32 region = 2;
}

// ref: bnet.protocol.account.ParentalControlInfo
message ParentalControlInfo {
	optional string timezone = 3;
	optional uint32 minutes_per_day = 4;
	optional uint32 minutes_per_week = 5;
	optional bool can_receive_voice = 6;
	optional bool can_send_voice = 7;
	repeated bool play_schedule = 8;
}

// ref: bnet.protocol.account.PrivacyInfo
message PrivacyInfo {
	// ref: bnet.protocol.account.PrivacyInfo/Types/GameInfoPrivacy
	enum GameInfoPrivacy {
		PRIVACY_ME = 0;
		PRIVACY_FRIENDS = 1;
		PRIVACY_EVERYONE = 2;
	}

	optional bool is_using_rid = 3;
	optional bool is_real_id_visible_for_view_friends = 4;
	optional bool is_hidden_from_friend_finder = 5;
	optional GameInfoPrivacy game_info_privacy = 6;
}

// ref: bnet.protocol.account.ProgramTag
message ProgramTag {
	optional fixed32 program = 1;
	optional fixed32 tag = 2;
}

// ref: bnet.protocol.account.RegionTag
message RegionTag {
	optional fixed32 region = 1;
	optional fixed32 tag = 2;
}

// ref: bnet.protocol.account.SubscriberReference
message SubscriberReference {
	optional uint64 object_id = 1;
	optional bnet.protocol.EntityId entity_id = 2;
	optional AccountFieldOptions account_options = 3;
	optional AccountFieldTags account_tags = 4;
	optional GameAccountFieldOptions game_account_options = 5;
	optional GameAccountFieldTags game_account_tags = 6;
}

// ref: bnet.protocol.account.SubscriptionUpdateRequest
message SubscriptionUpdateRequest {
	repeated SubscriberReference ref = 2;
}

// ref: bnet.protocol.account.SubscriptionUpdateResponse
message SubscriptionUpdateResponse {
	repeated SubscriberReference ref = 1;
}

// ref: bnet.protocol.account.Wallet
message Wallet {
	optional uint32 region = 1;
	optional uint64 wallet_id = 2;
	optional uint32 wallet_type = 3;
	optional string description = 4;
	optional uint32 country_id = 5;
	optional string state = 6;
	optional string city = 7;
	optional string postal_code = 8;
	optional bytes payment_info = 9;
	optional string bin = 10;
	optional string locale_id = 11;
	optional string street = 12;
	optional string first_name = 13;
	optional string last_name = 14;
	optional uint64 birth_date = 15;
}

// ref: bnet.protocol.account.Wallets
message Wallets {
	repeated Wallet wallets = 1;
}

