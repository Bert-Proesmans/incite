syntax = "proto2";
package bnet.protocol.channel_invitation;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "bnet/protocol/channel/channel.proto";
import "bnet/protocol/invitation/invitation.proto";
import "bnet/protocol/protocol.proto";

// ref: bnet.protocol.channel_invitation.AcceptInvitationRequest
message AcceptInvitationRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.channel.MemberState member_state = 2;
	optional fixed64 invitation_id = 3;
	optional uint64 object_id = 4;
	optional bnet.protocol.EntityId channel_id = 5;
	optional uint32 service_type = 6;
	optional bool local_subscriber = 7;
}

// ref: bnet.protocol.channel_invitation.AcceptInvitationResponse
message AcceptInvitationResponse {
	optional uint64 object_id = 1;
}

// ref: bnet.protocol.channel_invitation.ChannelCount
message ChannelCount {
	optional bnet.protocol.EntityId channel_id = 1;
	optional string channel_type = 2;
}

// ref: bnet.protocol.channel_invitation.ChannelCountDescription
message ChannelCountDescription {
	optional uint32 service_type = 1;
	optional fixed32 program = 2;
	optional string channel_type = 3;
	optional bnet.protocol.EntityId channel_id = 4;
}

// ref: bnet.protocol.channel_invitation.ChannelInvitation
message ChannelInvitation {
	optional bnet.protocol.channel.ChannelDescription channel_description = 1;
	optional bool reserved = 2;
	optional bool rejoin = 3;
	optional uint32 service_type = 4;
}

// ref: bnet.protocol.channel_invitation.ChannelInvitationParams
message ChannelInvitationParams {
	optional bnet.protocol.EntityId channel_id = 1;
	optional bool reserved = 2;
	optional bool rejoin = 3;
	optional uint32 service_type = 4;
}

// ref: bnet.protocol.channel_invitation.DecrementChannelCountRequest
message DecrementChannelCountRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId channel_id = 2;
	optional uint64 reservation_token = 3;
}

// ref: bnet.protocol.channel_invitation.HasRoomForInvitationRequest
message HasRoomForInvitationRequest {
	optional uint32 service_type = 1;
	optional fixed32 program = 2;
	optional string channel_type = 3;
}

// ref: bnet.protocol.channel_invitation.IncrementChannelCountRequest
message IncrementChannelCountRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	repeated ChannelCountDescription descriptions = 2;
}

// ref: bnet.protocol.channel_invitation.IncrementChannelCountResponse
message IncrementChannelCountResponse {
	repeated uint64 reservation_tokens = 1;
}

// ref: bnet.protocol.channel_invitation.InvitationAddedNotification
message InvitationAddedNotification {
	optional bnet.protocol.invitation.Invitation invitation = 1;
}

// ref: bnet.protocol.channel_invitation.InvitationCollection
message InvitationCollection {
	optional uint32 service_type = 1;
	optional uint32 max_received_invitations = 2;
	optional uint64 object_id = 3;
	repeated bnet.protocol.invitation.Invitation received_invitation = 4;
}

// ref: bnet.protocol.channel_invitation.InvitationRemovedNotification
message InvitationRemovedNotification {
	optional bnet.protocol.invitation.Invitation invitation = 1;
	optional uint32 reason = 2;
}

// ref: bnet.protocol.channel_invitation.ListChannelCountRequest
message ListChannelCountRequest {
	optional bnet.protocol.EntityId member_id = 1;
	optional uint32 service_type = 2;
	optional fixed32 program = 3;
}

// ref: bnet.protocol.channel_invitation.ListChannelCountResponse
message ListChannelCountResponse {
	repeated ChannelCount channel = 1;
}

// ref: bnet.protocol.channel_invitation.RevokeInvitationRequest
message RevokeInvitationRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId target_id = 2;
	optional fixed64 invitation_id = 3;
	optional bnet.protocol.EntityId channel_id = 4;
}

// ref: bnet.protocol.channel_invitation.SubscribeRequest
message SubscribeRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional uint64 object_id = 2;
}

// ref: bnet.protocol.channel_invitation.SubscribeResponse
message SubscribeResponse {
	repeated InvitationCollection collection = 1;
	repeated bnet.protocol.invitation.Invitation received_invitation = 2;
}

// ref: bnet.protocol.channel_invitation.SuggestInvitationRequest
message SuggestInvitationRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional bnet.protocol.EntityId channel_id = 2;
	optional bnet.protocol.EntityId target_id = 3;
	optional bnet.protocol.EntityId approval_id = 4;
	optional bnet.protocol.Identity agent_identity = 5;
	optional bnet.protocol.AccountInfo agent_info = 6;
}

// ref: bnet.protocol.channel_invitation.SuggestionAddedNotification
message SuggestionAddedNotification {
	optional bnet.protocol.invitation.Suggestion suggestion = 1;
}

// ref: bnet.protocol.channel_invitation.UnsubscribeRequest
message UnsubscribeRequest {
	optional bnet.protocol.EntityId agent_id = 1;
}

// ref: bnet.protocol.channel_invitation.UpdateChannelCountRequest
message UpdateChannelCountRequest {
	optional bnet.protocol.EntityId agent_id = 1;
	optional uint64 reservation_token = 2;
	optional bnet.protocol.EntityId channel_id = 3;
}

