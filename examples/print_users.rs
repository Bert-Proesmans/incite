extern crate chrono;
extern crate diesel;
extern crate dotenv;
extern crate failure;
extern crate incite;

use chrono::{Duration, Utc};
use diesel::prelude::*;
use dotenv::dotenv;
use std::env;
// Imports all declared Rust structures which relate to the database, eg Account.
use incite::models::*;

fn main() -> Result<(), failure::Error> {
    dotenv().ok();

    let db_url = env::var("DATABASE_URL").unwrap_or_else(|_| "file:server.db".into());
    let connection = SqliteConnection::establish(&db_url)?;
    let datetime_since = Utc::now()
        .checked_sub_signed(Duration::weeks(52))
        .expect("Invalid system time");
    let datetime_since = datetime_since.naive_utc();

    println!("Example code: Print all accounts that came online within the last year.");
    println!("");

    let query_time = Duration::span(|| {
        // Auto-generated by Diesel, these contain shortcuts such that we can write
        // our queries easier.
        use incite::schema::accounts::dsl::*;

        // accounts instead of accounts::table,
        // last_online instead of accounts::last_online
        // etc.
        let results = accounts
            .filter(last_online.gt(datetime_since))
            .order_by(battle_tag.asc())
            .load::<Account>(&connection)
            .expect("Error loading records");
        println!("Printing {:} accounts", results.len());

        for account in results {
            println!("{:}", account.id,);
            println!("email:\t\t{:}", account.email,);
            println!("battle_tag:\t{:}", account.battle_tag);
            println!("");
        }
    });

    println!(
        "Finished, operation took {:} milliseconds",
        query_time.num_milliseconds()
    );
    Ok(())
}
